pwd
ls
source("iwl-SSE.R")
methods
methods()
methods(class)
source("iwl-SSE.R")
source("iwl-SSE.R")
source("/Users/c/Desktop/InfoSecEcon-InvestmentModels/examples/IWL-SSE_WEIS16.R")
examineSWPhasesOnly
examineSWPhasesOnly()
evaluate()
evaluateOrig()
source("/Users/c/Desktop/InfoSecEcon-InvestmentModels/examples/IWL-SSE_WEIS16.R")
evaluate()
Figure6()
Figure7()
Figure8()
source("iwl-SSE.R")
source("iwl-Chad.R")
source("InfoEconFunction.R")
source("InfoEconFunctions.R")
source("/Users/c/Desktop/InfoSecEcon-InvestmentModels/examples/IWL-SSE_WEIS16.R")
Figure6()
Figure7()
Figure8()
ls()
source("iwl-SSE.R")
ls()
swProcess()
swProcessOnly()
examineSWPhases()
source("/Users/c/Desktop/InfoSecEcon-InvestmentModels/models/iwl-SSE.R")
ls()
CalculateSWProcessCosts()
CalculateOverallCosts()
FindOptimalInvestmentState()
FindOptimalSWInvestment()
source("/Users/c/Desktop/InfoSecEcon-InvestmentModels/models/iwl-SSE.R")
FindOptimalSWInvestment()
source("/Users/c/Desktop/InfoSecEcon-InvestmentModels/models/iwl-SSE.R")
FindOptimalSWInvestment()
FindOptimalSWInvestment <- function( maxRevIter=0, maxTestIter=0, revEff=1, testEff=1, revCost=1, testCost=1, sigmaMax=16, x0=15 ){#
	vals <- matrix(data=NA,nrow=maxRevIter, ncol=maxTestIter)	    # matrix to hold results#
	k <- 0;														# number of initial defences #
	# loop over reviews, then tests....#
	for( i in 0:maxRevIter ){#
		for( j in 0:maxTestIter ){#
			# Set the i,j value equal to the effectiveness of the integrated IWL-SSE process for that number of reviews, phases#
			vals[i,j] <- FindOptimalInvestmentState( i, j, revEff=revEff, testEff=testEff, revCost=revCost, testCost=testCost, sigmaMax=sigmaMax, x0=x0 )#
			### DEBUG#
			#message("---- iteration ", i, " ", j)#
			#message(vals[i+1,j+1])#
		}		#
	}#
	# Identify the index that points to the maximal value of return#
	ind <- which(vals == max(vals), arr.ind = TRUE)#
	# Output the max value of reviews, tests and return#
	paste("Best is ", ind[1], " review(s) and ", ind[2], " test(s), with return ", format(vals[ind],digits=8), sep="")#
}
FindOptimalSWInvestment()
FindOptimalInvestmentState()
####
# Uses CalculateOverallCosts in order to identify the optimal SSE investment#
# maxRevIter	Maximum number of iterations in the review phase (outer loop: 0 to max; default = 0)#
# maxTestIter	Maximum number of iterations in the test phase (inner loop: 0 to max; default = 0)#
# revEff		effectiveness of the process in the review phase (default=1)#
# testEff		effectiveness of the process in the test phase (default=1)#
# revCost		cost per iteration of the process in the review phase (default=1)#
# testCost		cost per iteration of the process in the test phase (default=1)#
# sigmaMax		starting uncertainty (default=16)#
# x0			starting attack cost (default=15, based on IWL)#
##
FindOptimalInvestmentState <- function( maxRevIter=0, maxTestIter=0, revEff=1, testEff=1, revCost=1, testCost=1, sigmaMax=16, x0=15 ){#
	dynamicVals <- CalculateOverallCosts( maxRevIter, maxTestIter, revEff, testEff, revCost, testCost, sigmaMax, x0 )#
	return(dynamicVals$rev[dynamicVals$k+1])#
}#
####
# Loops over a number of review and test iterations to identify the optimal investment#
# maxRevIter	Maximum number of iterations in the review phase (outer loop: 0 to max; default = 0)#
# maxTestIter	Maximum number of iterations in the test phase (inner loop: 0 to max; default = 0)#
# revEff		effectiveness of the process in the review phase (default=1)#
# testEff		effectiveness of the process in the test phase (default=1)#
# revCost		cost per iteration of the process in the review phase (default=1)#
# testCost		cost per iteration of the process in the test phase (default=1)#
# sigmaMax		starting uncertainty (default=16)#
# x0			starting attack cost (default=15, based on IWL)#
##
FindOptimalSWInvestment <- function( maxRevIter=0, maxTestIter=0, revEff=1, testEff=1, revCost=1, testCost=1, sigmaMax=16, x0=15 ){#
	vals <- matrix(data=NA,nrow=maxRevIter, ncol=maxTestIter)	    # matrix to hold results#
	k <- 0;														# number of initial defences #
	# loop over reviews, then tests....#
	for( i in 0:maxRevIter ){#
		for( j in 0:maxTestIter ){#
			# Set the i,j value equal to the effectiveness of the integrated IWL-SSE process for that number of reviews, phases#
			vals[i,j] <- FindOptimalInvestmentState( i, j, revEff=revEff, testEff=testEff, revCost=revCost, testCost=testCost, sigmaMax=sigmaMax, x0=x0 )#
			### DEBUG#
			#message("---- iteration ", i, " ", j)#
			#message(vals[i+1,j+1])#
		}		#
	}#
	# Identify the index that points to the maximal value of return#
	ind <- which(vals == max(vals), arr.ind = TRUE)#
	# Output the max value of reviews, tests and return#
	paste("Best is ", ind[1], " review(s) and ", ind[2], " test(s), with return ", format(vals[ind],digits=8), sep="")#
}
FindOptimalInvestmentState()
FindOptimalSWInvestment()
FindOptimalSWInvestment(1,1)
FindOptimalSWInvestment(25,25)
FindOptimalSWInvestment(25,25,0.6,0.3,3,1,16,15)
FindOptimalSWInvestment(25,25,0.6,0.3,3,1,16,10)
source("/Users/c/Desktop/InfoSecEcon-InvestmentModels/examples/IWL-SSE_WEIS16.R")
Figure7()
FindOptimalSWInvestment(25,25,0.6,0.3,3,1,16,15)
source("/Users/c/Desktop/InfoSecEcon-InvestmentModels/examples/IWL-SSE_WEIS16.R")
ls()
FindOptimalSWInvestment()
FindOptimalSWInvestment(1,1)
FindOptimalSWInvestment(30,30)
FindOptimalSWInvestment(30,30,0.6,0.3,3,1,16)
FindOptimalSWInvestment(30,30,0.6,0.3,3,1,16,15)
FindOptimalSWInvestment(25,25,0.6,0.3,3,1,16,15)
FindOptimalSWInvestment(50,50,0.6,0.3,3,1,16,15)
FindOptimalSWInvestment(25,25,0.6,0.3,3,1,16,15)
FindOptimalSWInvestment(50,50,0.6,0.27,3,1,16,15)
FindOptimalSWInvestment(25,25,0.6,0.27,3,1,16,15)
CalculateOverallCosts(25,25,0.6,0.3,3,1,16,15)
CalculateOverallCosts(8,24,0.6,0.3,3,1,16,15)
CalculateOverallCosts(7,24,0.6,0.3,3,1,16,15)
CalculateOverallCosts(75,75,0.6,0.3,3,1,16,15)
FindOptimalSWInvestment(25,25,0.6,0.29,3,1,16,15)
FindOptimalSWInvestment(25,25,0.6,0.28,3,1,16,15)
FindOptimalSWInvestment(25,25,0.6,0.27,3,1,16,15)
